{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["moment","locale","timeObject","toObject","App","props","state","hours","hour","minutes","seconds","timer","bind","this","setState","setInterval","className","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qRAMAA,IAAOC,OAAO,MACd,IAAMC,EAAaF,IAAO,SAAU,SAASG,WAqE9BC,E,kDAjEb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,MAAOL,EAAWK,MAAQP,MAASQ,OAAS,EAC5CC,QAAS,GAAKT,MAASS,UACvBC,QAAS,GAAKV,MAASU,WAEzB,EAAKC,MAAQ,EAAKA,MAAMC,KAAX,gBAPI,E,oDAWjBC,KAAKC,SAAS,CACZJ,QAASG,KAAKP,MAAMI,QAAU,IAE5BG,KAAKP,MAAMI,QAAU,GACvBG,KAAKC,SAAS,CACZL,QAASI,KAAKP,MAAMG,QAAU,EAC9BC,QAAS,KAGTG,KAAKP,MAAMG,QAAU,GACvBI,KAAKC,SAAS,CACZP,MAAOM,KAAKP,MAAMC,MAAQ,EAC1BE,QAAS,GACTC,QAAS,O,0CAIM,IAAD,OAClBK,aAAY,WACV,EAAKJ,UACJ,O,+BAGK,IAAD,EAC6BE,KAAKP,MAAjCC,EADD,EACCA,MAAOE,EADR,EACQA,QAASC,EADjB,EACiBA,QAGxB,OACE,yBAAKM,UAAU,OACb,yBAAKA,UAAU,aACb,wBAAIA,UAAU,WAAd,kKACA,yBAAKA,UAAU,mBAEb,yBAAKA,UAAU,yBACb,yBAAKA,UAAU,SAAST,GACxB,yBAAKS,UAAU,SAAf,+CAEF,yBAAKA,UAAU,SACb,yBAAKA,UAAU,WAAWP,GAC1B,yBAAKO,UAAU,SAAf,6BAEF,yBAAKA,UAAU,SACb,yBAAKA,UAAU,WAAWN,GAC1B,yBAAKM,UAAU,SAAf,gD,GAxDIC,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.f887b7a0.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './styles/App.css';\nimport moment from 'moment';\nimport 'moment/locale/th';\n\n\nmoment.locale(\"th\");\nconst timeObject = moment(\"220000\", \"hmmss\").toObject();\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      hours: timeObject.hours - moment().hour() - 1,\n      minutes: 60 - moment().minutes(),\n      seconds: 60 - moment().seconds(),\n    }\n    this.timer = this.timer.bind(this);\n\n  }\n  timer() {\n    this.setState({\n      seconds: this.state.seconds - 1\n    })\n    if (this.state.seconds < 0) {\n      this.setState({\n        minutes: this.state.minutes - 1,\n        seconds: 59\n      })\n    }\n    if (this.state.minutes < 0) {\n      this.setState({\n        hours: this.state.hours - 1,\n        minutes: 59,\n        seconds: 59\n      })\n    }\n  }\n  componentDidMount() {\n    setInterval(() => {\n      this.timer()\n    }, 1000);\n  }\n\n  render() {\n    const { hours, minutes, seconds } = this.state\n\n\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n          <h1 className=\"heading\">เมื่อไหร่จะถึงเวลาเคอร์ฟิว ?</h1>\n          <div className=\"countdownCurfew\">\n            \n            <div className=\"timer timer_highlight\">\n              <div className=\"hours\">{hours}</div>\n              <div className=\"label\">ชั่วโมง</div>\n            </div>\n            <div className=\"timer\">\n              <div className=\"minutes\">{minutes}</div>\n              <div className=\"label\">นาที</div>\n            </div>\n            <div className=\"timer\">\n              <div className=\"seconds\">{seconds}</div>\n              <div className=\"label\">วินาที</div>\n            </div>\n          </div>\n        </div>\n        {/* <img src={logo} className=\"imgStayhome\" alt=\"stay home icon\" /> */}\n      </div>\n    )\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}